/*

Given an infinite stream of non-negative integers, design an algorithm to output the 
top-K integers every time you encounter -1.

Example : Input = 4, 1, 2, -1, 3, -1 7 0 1 2 -1 8 -1 . . . ; K = 3
          Output = 1 2 4
                   2 3 4
                   3 4 7
                   4 7 8
                   . . .

*/
/*
You have to print top k element like if k=3;
an array or stream is 10,20,30,40,50,-1; // -1 is here as a breaker
Then top (k or 3) are output - 30,40,50
*/
#include<iostream>
#include<queue>

using namespace std;

// Code for print the minHeap
void printMinHeap(priority_queue<int, vector<int>, greater<int>> minHeap) {  // minHeap ka type vahi hai jo niche tha
    while(!minHeap.empty()) {
        cout << minHeap.top() << " ";
        minHeap.pop();
    }
    cout << endl;
}

int main() {

    int k = 3;
    priority_queue<int, vector<int>, greater<int>> minHeap; // MinHeap Created

    int data;

    // read and push first k elements into the minHeap
    for(int i=0; i<k; i++) {
        cin >> data;
        minHeap.push(data);
    }

// Below Loop is run infinitely so that's why we while(true);
    while(true) {
        cin >> data;
        if(data == -1) {
            // print the contents of the minHeap
            printMinHeap(minHeap);
        } else {
// if data is greater than next element than pop smaller elment and push greater element
            if(data > minHeap.top()) {
                minHeap.pop();
                minHeap.push(data);
            }
        }
    }
    return 0;
}
